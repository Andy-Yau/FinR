# FinEng Project
# FX Capital Guarantee pricing
# andyyau@connect.hku.hk

### DOCUMENTATION (code at bottom) ###


  #   The exchange rate model adopted is basic Vasicek model
  #   dr(t) = kappa*(theta - r(t))*dt + sigma*dW(t)
  #
  #   Estimation of parameters can be found here:
  #   http://www.math.ku.dk/~rolf/teaching/mfe04/MathFin.Vasicekestimation.R
  #   
  #
  #   Rates Notations (pr, cd, rf):
  #
  #   - participation rate (pr) is the higher rate the buyer can luckily get
  #   - certificate of deposite rate (cd) is the guaranteed rate if trigger is hit
  #   - risk-free rate (rf) is assumed to be accessible to all parties (incl. buyers)
  #
  #   According to the design, we infer pr > cd > rf 
  #   (the last inequality might not hold, give rising to variants)
  #   
  #
  #   List of functions:
  #   1.  [output] <- simulate([strike, tenor, graph])
  #       Usage: given trigger rate and maturity length, runs MCS and returns mean result
  #       Graph variable: 1 = exchange rate graph, 2 = risk-free rate graph, otherwise no graph
  #   2.  strike_to_price()
  #       Usage: graphs the relationship between P (y-axis) and K (x-axis)
  #   3.  strike_to_ratio()
  #       Usage: graphs the relationship between Success Ratio (y-axis) and K (x-axis)
  #
  #   Patch History:
  #   18/4/18 - prototype available on github (Andy)
  #   19/4/18 - add stochastic process to rf (Andy)
  #   19/4/18 - modify monte carlo trigger rule, use max instead of counting, bug fixed (Steven)
  
  
### MAIN CODE ###

library("quantmod")
rate <- matrix()
PF <- matrix()     # raw payoff vector
PF.d <- matrix()   # discounted payoff vector
PF.mean <- matrix()# mean of PF.d
ratio <- matrix()  # success ratio (= win.count/trials)
rf <- matrix()     # HK 10Y Gbond yield evolution vector

# inputs (strike and tenor are to be assigned in the valuation function)
I <- 100000       # base capital deposit
pr <- 0.05        # participation rate
cd <- 0.02        # CD rate (i.e. guaranteed rate)
dt <- 1/252       # discretized daily on 252 basis
trials <- 1000    # number of trial runs

## data retrieval (seems OANDA has failed) # obs <- getFX("USD/CNY", from = "2018-01-01", auto.assign = FALSE)
dataset.rate <- read.csv(file="E:/YCH USB/HKU QFin/Year 4/Sem 2/financial engineering/Project/CHF_data.csv", header = TRUE)
dataset.rf <- read.csv(file="E:/YCH USB/HKU QFin/Year 4/Sem 2/financial engineering/Project/HKRF_data.csv", header = TRUE)
# USD/CHF data
data <- dataset.rate[-1,5]
n <- length(data)
data.lag <- dataset.rate[-n,5]
# HK 10Y GBond data
data.rf <- dataset.rf[-1,2]
n.rf <- length(data.rf)
data.lag.rf <- dataset.rf[-n.rf,2]
S <- data[n]

## parameter estimation (exchange rate stochastics)
  #dr(t) = kappa*(theta - r(t))*dt + sigma*dW(t)
b <- (sum(data*data.lag)-sum(data)*sum(data.lag)/n)/(sum(data.lag^2)-(sum(data.lag)^2/n))
kappa <- -log(b)/dt
a <- sum(data)/n - b*sum(data.lag)/n
theta <- a/(1-b)
sigma <- sqrt(2*kappa*(sum((data-data.lag*b-a)^2)/n)/(1-b^2))

## parameter estimation (risk-free rate stochastics)
  #drf(t) = kappa.rf*(theta.rf - rf(t))*dt + sigma.rf*dW(t)
b.rf <- (sum(data.rf*data.lag.rf)-sum(data.rf)*sum(data.lag.rf)/n.rf)/(sum(data.lag.rf^2)-(sum(data.lag.rf)^2/n.rf))
kappa.rf <- -log(b.rf)/dt
a.rf <- sum(data.rf)/n.rf - b.rf*sum(data.lag.rf)/n.rf
theta.rf <- a.rf/(1-b.rf)
sigma.rf <- sqrt(2*kappa.rf*(sum((data.rf-data.lag.rf*b.rf-a.rf)^2)/n.rf)/(1-b.rf^2))

# product valuation function
simulate <- function(strike, tenor, sigma, graph = 0, listout = 0){ #added more parameters, so to use for option greeks
  # initialize
  rate[1] <- data[1] # first rate equals first datum in data
  rf[1] <- data.rf[1] # first rf equals first datum in data.rf
  win.count <- 0 # counts how many "wins"
  loss.count <- 0 # counts how many "losses"
  for (j in 1:trials){
    indicator <- 0    # 0 if not hit, 1 if triggered; reset every trial
    rf.int <- 0       # initialize integral of rf
    # rate evolution
    for (i in 1 : as.integer(tenor/dt)){
      rf.int <- rf.int + rf[i]*dt                                               # rf integral
      rate[i+1] = rate[i] + kappa*(theta-rate[i])*dt + sigma*sqrt(dt)*rnorm(1)  # exchange rate evolution
      rf[i+1] = rf[i] + kappa.rf*(theta.rf-rf[i])*dt + sigma*sqrt(dt)*rnorm(1)  # rf evolution
      #if (rate[i+1] > strike){
        #indicator = indicator + 1 # triggered is hit, counted by indicator
      #}
    }
    # contract payoff, and trigger count record
    #if (indicator == 0){
    if (max(rate) >= strike) {  
      PF[j] <- I * (1 + pr) # not triggered, high rate (pr)
      win.count = win.count + 1
    } else {
      PF[j] <- I * (1 + cd) # triggered, guaranteed rate (cd)
      loss.count = loss.count + 1
    }
    PF.d[j] = PF[j]*exp(-rf.int) # discounting
  }
  # for validation only
  if(win.count + loss.count != trials){
    print("Win and loss do not sum up to total trials.")
    break
  }
  # graphing
  if(graph == 1){
    plot(rate, xlab = 'dt')
    lines(rate)
  } else if (graph == 2){
    plot(rf, xlab = 'dt')
    lines(rf)
  }
  # output
  if(listout == 1) {
    simulate = list(mean(PF.d), win.count/trials)
  } else {
    simulate = mean(PF.d)
  }
}

# for visualization, calculate and plot strike against product price

strike_to_price <- function(){
  counter = 1
  for (K in seq(0.8, 1.2, by = 0.01)){
    PF.mean[counter] = simulate(K,1,sigma,0,1)[[1]] #added parameters
    counter = counter + 1
  }
  plot(y = PF.mean, x = seq(0.8, 1.2, by = 0.01), xlab = 'Trigger Rate')
}

# for visualization, calculate and plot strike against success ratio

strike_to_ratio <- function(){
  counter = 1
  for (K in seq(0.8, 1.2, by = 0.01)){
    ratio[counter] = simulate(K,1,sigma,0,1)[[2]] #added parameters 
    counter = counter + 1
  }
  plot(y = ratio, x = seq(0.8, 1.2, by = 0.01), xlab = 'Trigger Rate')
}

violatility_to_price <- function(){
  counter = 1
  for (sigmaes in seq(0.01, 0.3, by = 0.01)){
    PF.mean[counter] = simulate(1.02,1,sigmaes,0,1)[[1]]
    counter = counter + 1
  }
  plot(y = PF.mean, x = seq(0.01, 0.3, by = 0.01), xlab = 'Violatility', ylab = 'Price', main="Violatility to Price, 4% depreciation")
} 
